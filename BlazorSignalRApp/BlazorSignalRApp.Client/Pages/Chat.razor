@page "/chat"
@rendermode InteractiveWebAssembly
@inject NavigationManager Navigation
@using Microsoft.AspNetCore.SignalR.Client
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<div class="p-4">
    <div>
        <label class="text-red-400">
            사용자:
            <input type="text" class="px-2 py-2 m-2 border-sky-400 rounded-lg" @bind="_userInput"/>
        </label>
    </div>

    <div>
        <label>
            메시지:
            <input type="text" class="p-2 py-2 m-2 border-sky-400 rounded-lg my-2" @bind="_messageInput"/>
        </label>
    </div>
    <div class="w-full h-48 bg-rose-300">Hello, World</div>
    <button @onclick="SendAsync" class="px-4 py-2 rounded-2xl bg-sky-800 text-slate-50" disabled="@(!IsConnected)">전송</button>
    <hr/>

    <ul>
        @foreach (var message in _messages)
        {
            <li>@message</li>
        }
    </ul>
</div>

@code {
    private HubConnection? _hubConnection;
    private readonly List<string> _messages = [];
    private string? _userInput;
    private string? _messageInput;

    protected override async Task OnInitializedAsync()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/chatHub"))
            .Build();

        _hubConnection.On<string, string>("ReceiveMessage", (user, message) =>
        {
            var encodeMsg = $"{user}: {message}";
            _messages.Add(encodeMsg);
            InvokeAsync(StateHasChanged);
        });

        await _hubConnection.StartAsync();
    }


    private async Task SendAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.SendAsync("SendMessage", _userInput, _messageInput);
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection is not null)
            await _hubConnection.DisposeAsync();
    }

}