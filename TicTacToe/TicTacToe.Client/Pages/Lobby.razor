@page "/"
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))
<h3 class="!text-slate-400 font-bold  text-3xl">
    Welcome to Tic Tac Toe! Game
</h3>

@if (currentRoom is null)
{
    <input type="text" class="border-1 px-4 py-2 rounded-xl" 
           @bind="playerName" placeholder="플레이어 이름"
           />
    
    <input
        type="text"
        class="border-1 px-4 py-2 rounded-xl"
        @bind="playerName" placeholder="방 이름"
    />
    
    <button @onclick="CreateRoom" class="px-4 py-2 rounded-xl bg-sky-400 hover:bg-red-400">방 만들기</button>
    
    <h3 class="client-title">Rooms: </h3>
    <ul>
        @foreach (var room in rooms)
        {
            <li class="client-li">
                <span class="client-span-name">@room.RoomName</span>
                <button @onclick="() => JoinRoom(room.RoomId)"
                        class="client-ok-button">방입장</button>
            </li>
        }
    </ul> 
}
else
{
    <CascadingValue Value="hubConnection">
        <Room CurrentRoom="currentRoom" />
    </CascadingValue>
}

@code {
    private HubConnection? hubConnection; // The SignalR hub connection
    private string playerName = string.Empty; // 플레이어 이름
    private string currentRoomName = string.Empty; // 방이름 
    private GameRoom? currentRoom; // 현재 방의 플레이어 
    private List<GameRoom> rooms = []; // 방목록


    protected override async Task OnInitializedAsync()
    {
        // Create a new hub connection
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();
        
        // Register for the OnRooms event
        hubConnection.On<List<GameRoom>>("Rooms", roomList =>
        {
            rooms = roomList;
            StateHasChanged();
        });
        
        
        // Start the connection
        await hubConnection.StartAsync();
    }

    // 방만들기
    private async Task CreateRoom()
    {
        if (hubConnection is null) return;

        currentRoom = await hubConnection
            .InvokeAsync<GameRoom>("CreateRoom",
            currentRoomName, 
            playerName);
    }

    private async Task JoinRoom(string roomId)
    {
        if (hubConnection is null) return;

        var joinedRoom = await hubConnection
            .InvokeAsync<GameRoom>("JoinRoom", 
                roomId, 
                playerName);

        currentRoom = joinedRoom;
        currentRoomName = joinedRoom.RoomName;
    }
}