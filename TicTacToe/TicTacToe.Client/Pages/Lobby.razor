@page "/tictactoe"
@inject NavigationManager NavigationManager
@rendermode @(new InteractiveWebAssemblyRenderMode(false))

<h3 class="client-title text-center">
    Welcome to Tic Tac Toe!
</h3>

@if (currentRoom is null)
{
    <input type="text"
           class="client-input"
           @bind="playerName"
           placeholder="Your Name" />

    <input type="text"
           class="client-input"
           @bind="currentRoomName"
           placeholder="Room Name" />

    <button
            @onclick="CreateRoom"
            class="client-ok-button">
        방만들기
    </button>

    <h3 class="client-title">방목록</h3>

    <ul>
        @foreach (var room in rooms)
        {
            <li class="client-li">
                <span class="client-span-name">@room.RoomName</span>
                <button @onclick="() => JoinRoom(room.RoomId)"
                        class="client-ok-button">
                    Join
                </button>
            </li>
        }
    </ul>
}
else
{
    <CascadingValue Value="hubConnection">
        <Room CurrentRoom="currentRoom" />
    </CascadingValue>
}

@code
{
    private HubConnection? hubConnection; // The SignalR hub connection
    private string playerName = string.Empty; // The player's name
    private string currentRoomName = string.Empty; // The name of the room the player is currently in (if any)
    private GameRoom? currentRoom; // The room the player is currently in (if any)
    private List<GameRoom> rooms = []; // The list of rooms

    protected override async Task OnInitializedAsync()
    {
        // Create a new hub connection
        hubConnection = new HubConnectionBuilder().WithUrl(NavigationManager.ToAbsoluteUri("/gamehub")).Build();

        // Register for the OnRooms event
        hubConnection.On<List<GameRoom>>("Rooms", x =>
        {
            Console.WriteLine($"We got rooms! Count = {x.Count()}");
            rooms = x;
            StateHasChanged();
        });

        // Start the connection
        await hubConnection.StartAsync();
    }

    // Create a new room
    private async Task CreateRoom()
    {
        // Check if the hub connection is initialized
        if (hubConnection is null) return;

        // Invoke the CreateRoom method on the server
        currentRoom = await hubConnection.InvokeAsync<GameRoom>("CreateRoom", currentRoomName, playerName);
    }

    // Join an existing room
    private async Task JoinRoom(string roomId)
    {
        // Check if the hub connection is initialized
        if (hubConnection is null)
            return;

        // Invoke the JoinRoom method on the server
        var joinedRoom = await hubConnection.InvokeAsync<GameRoom>("JoinRoom", roomId, playerName);

        currentRoom = joinedRoom;
        currentRoomName = joinedRoom.RoomName;
    }
}
