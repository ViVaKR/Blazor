@page "/code"
@inject IJSRuntime Js
@rendermode InteractiveServer
@implements IAsyncDisposable

<PageTitle>코드조각</PageTitle>

<div class="px-8 py-4 flex flex-col gap-2">

    <h3>@Name</h3>


    <button
            @onclick="SetName"
            class="bg-sky-500
            text-slate-50
            rounded-lg px-4 py-2">
        Set Name
    </button>

    <button
            @onclick="() => ShowAlert()"
            class="bg-sky-500 rounded-lg px-4 py-2">Do
        something
    </button>

    <button
            @onclick="ShowPrompt" class="bg-sky-500 rounded-lg px-4 py-2">
        Show Prompt
    </button>

    <button id="btn" class="bg-rose-500 rounded-lg px-4 py-2">Trigger .NET
        static method</button>

</div>
@code
{
    [JSInvokable]
    private async Task ShowAlert()
    {
        await Js.InvokeVoidAsync("alert", "Do something");
    }

    private async Task ShowPrompt()
    {
        var result = await Js.InvokeAsync<string>("prompt", "Enter your name");
        Name = result;
    }

    public string Name { get; set; } = "Code";

    public void SetName()
    {
        Name = "Fine Thanks And You?";
    }

    public async Task DoSomething(string first, string second)
    {
        Name = "Blazor";
        await Console.Out.WriteLineAsync($"First: {first}, Second: {second}");
    }

    protected override async Task OnInitializedAsync()
    {
        await Console.Out.WriteLineAsync("Code component initialized");
    }

    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await Js.InvokeAsync<IJSObjectReference>("import",
            "./Components/Pages/Code/Code.razor.js");
            await module.InvokeVoidAsync("returnArrayAsync");
            await module.InvokeVoidAsync("addHandlers");
        }
    }

    [JSInvokable]
    public static Task<int[]> ReturnStringAsync()
    => Task.FromResult(new int[] { 11, 12, 13 });

    public class Person
    {
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
    }

    [JSInvokable]
    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException ex)
            {
                await Console.Out.WriteLineAsync($"Error disposing module: {ex.Message}");
            }
        }
    }
}
