@page "/"
@using System.Text.Json
@using VivaKrWeb.Shared.Services
@using Microsoft.Extensions.Http
@inject IFormFactor FormFactor
@inject IHttpClientFactory ClientFactory

<PageTitle>Home</PageTitle>

<div
     class="relative grid grid-cols-1 h-dvh w-full overflow-hidden bg-robot bg-cover bg-center bg-no-repeat">

    <div
         class="absolute top-0 left-0 bottom-0 right-0 h-screen w-full bg-fixed bg-teal-950/70">
        @* message *@
        <div class="flex flex-col h-full items-center justify-center">
            <div id="message"
                 class="mb-4 text-9xl max-xl:text-5xl
                  relative
                  text-center text-white
                  font-cute
                  tracking-widest
                  font-extrabold">
                @foreach (var c in message)
                {
                    @if (@c == '-')
                    {
                        <span>&nbsp;</span>
                    }
                    else
                    {
                        <span>@c</span>
                    }
                }
            </div>
        </div>

        @* box *@
        <!-- folder -->
        <div class="folder">

            @foreach (var ip in ipAddress)
            {
                <div class="file">
                    <span class="font-poppins">@ip</span>
                </div>
            }

        </div>

        @* button *@
        <button type="button"
                class="bottom-16 left-1/2 transform -translate-x-1/2 hover:!text-rose-100">
            Snippets
        </button>
    </div>
</div>


@code {
    private string factor => FormFactor.GetFormFactor();
    private string platform => FormFactor.GetPlatform();

    private readonly string? title = "Welcome to VivWeb!";

    private readonly char[] message = [
    '인', '간', '이', '-', '이', '해', '하', '는', '-', '코', '드', '조', '각', '.', '.', '.'
    ]; //"인간이 이해하는 코드조각...".ToCharArray();


    private string[] ipAddress = new string[] { "0", "0", "0", "0" };

    private const string baseUrl = "https://api.ipify.org?format=json";
    public async Task<string[]> GetPublicIp()
    {
        var client = ClientFactory.CreateClient();
        var response = await client.GetAsync(baseUrl);

        if (!response.IsSuccessStatusCode)
        {
            return new string[] { "0", "0", "0", "0" };
        }

        var content = await response.Content.ReadAsStringAsync();
        var json = JsonDocument.Parse(content);
        var root = json.RootElement;

        return root.TryGetProperty("ip", out JsonElement ipElement) &&
        ipElement.GetString() is string ip
        ? ip.Split('.')
        : new string[] { "0", "0", "0", "0" };
    }

    protected override async Task OnInitializedAsync()
    {
        ipAddress = await GetPublicIp();
    }

}
