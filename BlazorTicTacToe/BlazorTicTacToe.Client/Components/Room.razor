@if (CurrentRoom is not null)
{
    <h3>@CurrentRoom.RoomName</h3>
    if (CurrentRoom.Players.Count < 2)
    {
        <h4>Wating for another player to join...</h4>
    }

    // If the game has not started and the current player is not the host
    if (!CurrentRoom.Game.GameStarted // Game has not started
    && CurrentRoom.Players.Count == 2 // There are two players in the room
    && CurrentRoom.Game.PlayerXId != myPlayerId) // The current player is not the host
    {
        <h4>Waiting for the other player to start the game...</h4>
    }

    if (CurrentRoom.Game.GameOver && !CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! Winner: @CurrentRoom.Game.Winner</h4>
    }

    if (CurrentRoom.Game.GameOver && CurrentRoom.Game.IsDraw)
    {
        <h4>Game Over! It's a Draw!</h4>
    }

    // If the game has not started and the current player is the host
    if (
    (!CurrentRoom.Game.GameStarted || CurrentRoom.Game.GameOver) // Game has not started or is over
    && CurrentRoom.Game.PlayerXId == myPlayerId // The current player is the host
    && CurrentRoom.Players.Count == 2) // There are two players in the room
    {
        <button class="client-ok-button" @onclick="StartGame">Start Game</button>
    }

    if (CurrentRoom.Game.GameStarted)
    {
        <h4>It's @CurrentRoom.Game.CurrentPlayerSymbol's Turn</h4>

        <span> Currently Playing: @CurrentRoom.Players[0].Name (X), @CurrentRoom.Players[1].Name (O) </span>

        <table class="tic-tac-toe">
    @for (int row = 0; row < 3; row++)
            {
                <tr>
                    @for (int col = 0; col < 3; col++)
                    {
                        var r = row; // Store the row and column values in local variables
                        var c = col; // to avoid capturing the loop variables
                        <td @onclick="() => MakeMove(r, c)">
                            @CurrentRoom.Game.Board[r][c]
                        </td>
                    }
                </tr>
            }
        </table>

        @if (CurrentRoom.Game.GameOver)
        {
            <h4>Game Over!</h4>
            <h4>@CurrentRoom.Game.Winner Wins!</h4>
        }

        @if (!IsMyTurn() && !CurrentRoom.Game.GameOver)
        {
            <h4>Waiting for the other player to make a move...</h4>
        }

    }
}

@code
{
    private string? myPlayerId;
    [CascadingParameter]
    public HubConnection? HubConnection { get; set; } // The SignalR hub connection

    [Parameter]
    public GameRoom? CurrentRoom { get; set; }

    // This method is called when the component is initialized
    protected override async Task OnInitializedAsync()
    {
        if (CurrentRoom is null || HubConnection is null || HubConnection.ConnectionId is null)
        {
            await Task.CompletedTask;
            return;
        }

        myPlayerId = HubConnection.ConnectionId;

        // Register for the OnPlayerJoined event
        HubConnection?.On<Player>("PlayerJoined", player =>
        {
            CurrentRoom?.Players.Add(player); // Add the player to the room
            StateHasChanged(); // Update the UI
        });

        // Register for the OnRoom event
        HubConnection?.On<GameRoom>("UpdateGame", serverRoom =>
        {
            CurrentRoom = serverRoom; // Update the room
            StateHasChanged(); // Update the UI
        });
    }

    // Start the game
    private async Task StartGame()
    {
        if (HubConnection is null || CurrentRoom is null)
        {
            await Task.CompletedTask;
            return;
        }

        // Invoke the StartGame method on the server
        await HubConnection.InvokeAsync("StartGame", CurrentRoom.RoomId);
    }

    // Make a move
    private async Task MakeMove(int row, int col)
    {
        if (IsMyTurn()
        && CurrentRoom is not null
        && CurrentRoom.Game.GameStarted
        && !CurrentRoom.Game.GameOver
        && HubConnection is not null)
        {
            // Invoke the MakeMove method on the server
            await HubConnection.InvokeAsync("MakeMove", CurrentRoom.RoomId, row, col, myPlayerId);
        }


        // Invoke the MakeMove method on the server
        // await HubConnection.InvokeAsync("MakeMove", CurrentRoom.RoomId, row, col, myPlayerId);
    }

    // Is it the current player's turn?
    private bool IsMyTurn()
    {
        if (CurrentRoom is not null && myPlayerId is not null)
        {
            return myPlayerId == CurrentRoom.Game.CurrentPlayerID;
        }
        return false;
    }
}
